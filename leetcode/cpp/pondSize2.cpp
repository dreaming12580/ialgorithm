

#include <vector>
#include <algorithm>
#include <iostream>
#include <set>

using namespace std;
namespace pondSize {

class UF {
private:
    // 连通分量个数
    int _count;
    // 存储一颗数
    vector<int> _father;
    // 记录树的重量
    vector<int> _size;

public:
    UF(int n) {
        _count = n;
        _father = vector<int>(n);
        _size = vector<int>(n);
        for (int i = 0; i < n; i++) {
            _father[i] = i;
            _size[i] = 1;
        }
    }

    int find(int x) {
        /*
        while (_father[x] != x) {
            // 进行路径压缩
            _father[x] = _father[_father[x]];
            x = _father[x];
        }
        return x;
        */
       return _father[x];
    }



    bool join(int p, int q) {
        int root_p = this->find(p);
        int root_q = this->find(q);
        if (root_p == root_q) {
            return false;
        }
        // 小树连接到大树下面，较平衡
        if (_size[root_p] > _size[root_q]) {
            _father[root_q] = root_p;
            _size[root_p] += _size[root_q];
            if (_size[root_p] == 10) {
                return true;
            }
        } else {
            _father[root_p] = root_q;
            _size[root_q] += _size[root_p];
            if (_size[root_q] == 10) {
                return true;
            }
        }
        _count--;
        return false;
    }

  bool connected(int p, int q) {
    int rootP = find(p);
    int rootQ = find(q);
    return rootP == rootQ;
  }


    int count() const {
        return _count;
    }

    vector<int> size() const {
        return _size;
    }

};










class Solution {
private:
    int m;
    int n;
    vector<vector<int>> dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};


public:

    vector<int> pondSizes(vector<vector<int>>& land) {
        int m = land.size();
        int n = land[0].size();
        cout << "m:" << m << ",n:" << n << endl;
        vector<vector<int>> visited(m, vector<int>(n, false));
        int len = m * n;
        int cur_pos, next_pos;
        UF uf(len);
        
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (land[i][j] != 0) {
                    continue;
                }
                if (visited[i][j]) {
                    continue;
                }
                visited[i][j] = true;
                for (int k = 0; k < dirs.size(); ++k) {
                    int tmp_i = i + dirs[k][0];
                    int tmp_j = j + dirs[k][1];
                    if (!(tmp_i >= 0 && tmp_i < m && tmp_j >= 0 && tmp_j < n) ||
                        (visited[tmp_i][tmp_j]) || 
                        (land[tmp_i][tmp_j] != 0)) {
                        continue;
                    }
                    cur_pos = i * n + j;
                    next_pos = tmp_i * n + tmp_j;
                    if (i == 5 && j == 19) {
                        cout << "cur[" << uf.find(cur_pos) << "]:" << uf.size()[uf.find(cur_pos)] << ",next:" << uf.size()[uf.find(next_pos)] << endl;
                    }
                    if(uf.join(cur_pos, next_pos)) {
                        cout << "i:" << i << ",j:" << j 
                            << ",tmp_i:" <<  tmp_i  << ",tmp_j:" << tmp_j << endl;
                    }       
                }

            }
        }

        cout << "uf.count:" << uf.count() << endl;

        cout << "uf.size:" << uf.size().size() << endl;

        cout << "size:";
        for (auto item : uf.size()) {
            if (item == 8) 
            cout << " " << item;
        }
        cout << endl;



        multiset<int> ms;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int tmp = i * n + j;
                if (land[i][j] == 0 && uf.find(tmp) == tmp) {
                    ms.insert(uf.size()[uf.find(tmp)]);
                }
            }
        }
        cout << "ms:";
        for (auto& item : ms) {
            cout << " " << item;
        }
        cout << endl;
        vector<int> ans(ms.begin(), ms.end());
        return ans;
    }
};

} // namespace pondSize


int main() {
    /*
    vector<vector<int>> land = {
        {0, 2, 1, 0}, {0, 1, 0, 1},
        {1, 1, 0, 1}, {0, 1, 0, 1}
    };
    */

    vector<vector<int>> land = {
    {2,8,8,4,1,7,1,5,4,2,0,8,1,9,2,5,6,9,7,4,8,9,1,7,3,6,9,3,7,1,5,7,3,1,9,9,9,6,5,1,9,9,4,1,6,4,7,6,1,6,1,3,3,9,0,3,0,0,0,1,3,1,2,0,0,0,3,2,7,3,6,7,9},
    {2,0,9,8,2,0,5,8,4,0,4,5,2,1,5,6,0,6,3,3,6,9,5,4,0,9,4,7,1,4,2,8,9,8,0,6,3,5,7,2,1,6,8,4,8,4,6,5,0,3,7,1,7,6,3,0,2,2,2,3,2,4,7,7,6,8,2,9,2,5,0,3,8},
    {2,7,0,1,1,3,6,5,6,0,7,0,2,4,5,0,3,7,3,1,5,7,9,8,8,0,9,8,1,9,4,7,5,6,5,4,1,7,7,4,4,3,8,3,5,3,3,8,7,4,5,4,8,0,2,0,4,7,5,4,3,9,1,9,4,9,2,2,2,4,1,2,9},
    {6,0,4,4,6,7,8,8,9,9,5,4,9,7,0,4,2,7,1,9,2,2,9,2,4,3,0,5,1,7,8,9,0,5,3,3,3,1,1,7,1,2,7,5,6,8,7,2,3,1,5,3,5,7,9,7,7,8,8,7,2,4,4,2,8,2,3,2,1,9,1,2,7},
    {2,5,1,2,2,5,8,2,8,7,4,5,9,8,9,6,0,9,7,0,5,8,8,3,3,8,1,9,4,8,2,3,4,9,1,2,4,5,1,5,4,4,6,9,2,3,3,1,2,2,4,1,2,7,4,6,9,2,3,5,9,7,7,4,9,9,4,7,1,5,5,7,6},
    {9,9,9,1,8,3,3,4,6,5,7,7,3,1,1,3,9,2,7,0,6,8,8,0,2,9,6,6,4,4,6,2,6,6,1,7,5,6,4,9,6,9,8,2,1,4,3,4,6,6,8,6,4,7,8,3,7,1,3,7,5,3,2,1,4,7,9,7,3,4,9,0,1},
    {7,1,4,9,7,2,1,9,0,9,7,4,5,3,5,2,6,5,6,0,5,0,5,3,1,1,7,9,6,2,1,8,3,4,7,4,2,1,3,5,9,7,7,5,6,1,0,3,6,3,7,9,6,5,1,4,5,7,2,3,5,3,5,2,0,9,5,1,8,6,0,0,6},
    {7,9,9,8,8,3,9,7,5,1,1,8,4,4,6,3,7,2,1,9,5,6,1,2,2,5,6,3,9,6,7,9,2,7,1,4,7,3,5,0,1,2,2,5,4,9,3,1,2,1,1,0,5,1,8,4,2,1,2,4,5,4,5,6,8,7,7,4,8,3,2,7,9},
    {6,6,6,7,0,8,7,6,2,6,3,1,4,6,6,9,6,2,0,5,4,9,9,9,8,8,6,2,4,3,1,6,6,4,4,4,3,1,8,1,8,3,9,5,2,7,0,0,4,0,6,9,2,0,3,1,6,3,0,7,9,3,9,4,3,6,7,9,8,9,4,2,7},
    {7,8,1,8,5,3,5,1,2,9,6,2,8,7,9,7,7,8,6,3,4,4,3,2,8,6,5,7,8,5,7,5,8,3,9,6,8,9,6,6,8,7,4,9,4,6,1,1,6,7,5,6,7,0,3,3,9,3,6,1,3,8,1,2,8,3,3,6,7,9,4,4,1},
    {0,7,6,7,6,4,3,1,7,8,0,0,3,1,1,7,9,2,7,9,4,9,6,2,6,6,4,0,1,8,5,6,8,1,3,8,3,7,7,9,8,4,2,8,2,5,5,9,3,3,1,6,3,1,5,2,0,4,2,2,5,4,3,4,6,7,3,4,5,1,5,7,2},
    {1,7,7,6,3,4,1,8,4,3,9,8,1,5,5,4,7,7,1,8,5,7,6,4,2,6,7,7,1,3,1,7,4,8,5,2,3,9,1,2,8,2,2,0,4,5,6,1,0,4,4,2,4,9,2,4,8,2,5,5,8,2,4,8,9,3,9,1,4,5,5,5,1},
    {0,1,1,8,9,1,0,1,3,0,5,9,3,4,1,7,1,2,1,7,3,4,2,7,2,9,9,7,4,8,7,4,2,6,7,8,8,4,9,6,5,9,6,3,0,0,0,6,4,0,9,8,1,7,0,9,9,3,7,5,8,9,4,9,9,1,2,7,5,3,2,2,3},
    {8,8,1,9,4,8,6,7,4,8,7,7,3,1,6,2,6,3,2,8,4,9,3,5,3,7,1,1,3,7,5,6,6,1,9,3,0,6,1,7,5,1,8,1,6,7,1,8,2,2,0,5,1,0,7,6,7,9,3,2,7,8,5,5,2,1,2,3,0,1,5,0,7},
    {8,1,9,4,4,5,8,3,8,5,2,3,8,4,5,6,5,0,4,0,6,7,5,5,2,7,8,5,2,1,4,9,5,1,3,4,8,7,7,3,8,5,1,5,5,9,3,9,0,0,0,8,0,4,0,5,3,8,5,1,5,0,1,7,1,3,7,4,2,9,5,5,4},
    {5,3,5,5,4,4,1,5,6,1,7,4,0,7,5,8,0,3,6,7,0,4,4,8,3,2,6,3,8,0,9,8,9,9,3,2,7,6,9,6,3,1,8,8,6,4,9,4,4,2,7,5,0,1,5,0,8,9,4,1,6,9,8,7,0,1,7,3,4,6,1,1,8},
    {1,9,5,4,1,7,0,6,3,2,1,5,3,1,8,7,5,7,6,6,8,0,3,8,8,2,5,6,7,2,7,8,2,1,5,3,9,3,5,2,2,9,4,7,8,6,7,7,9,8,6,3,0,6,9,7,3,1,9,1,9,1,5,6,3,7,1,0,8,9,9,8,1},
    {5,8,5,7,7,8,0,7,9,2,0,4,5,8,8,7,8,6,5,4,6,3,4,1,7,2,8,7,4,7,5,2,5,5,9,3,3,7,1,6,5,1,9,5,5,5,6,2,1,3,6,8,1,0,5,2,8,8,9,9,3,0,5,3,3,8,1,4,5,8,3,2,7}
    };


    pondSize::Solution ss;
    ss.pondSizes(land);

    return 0;
}

















